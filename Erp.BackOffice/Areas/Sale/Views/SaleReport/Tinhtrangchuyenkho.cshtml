@*@model  IEnumerable<ProductOutboundViewModel>*@
@model PagedList.IPagedList<ProductOutboundViewModel>
@using PagedList.Mvc;
@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = "Danh sách tình trạng chuyển kho";
    Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "SaleReport",
        ActionName = "Tinhtrangchuyenkho",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    int index = 1;
    var warehouseSourceId = Request["warehouseSourceId"] != null ? Request["warehouseSourceId"] : "";
    IEnumerable<SelectListItem> warehouseList = Erp.BackOffice.Helpers.SelectListHelper.GetSelectList_WarehouseRepost(warehouseSourceId, "Kho xuất");
    var warehouseDestinationId = Request["warehouseDestinationId"] != null ? Request["warehouseDestinationId"] : "";
    IEnumerable<SelectListItem> warehouseDestinationList = Erp.BackOffice.Helpers.SelectListHelper.GetSelectList_WarehouseRepost(warehouseDestinationId, "Kho nhập");
    string Status = Request["Status"] != null ? Request["Status"] : "";
    int rowNumber = 0;
    int numberOfItem = 20;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
    int tongPage = (rowNumber / numberOfItem) + 1;
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>

@helper GridColumnCommand(int id)
{
    @*<div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">*@
    <p>
        @*<button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>*@
        <a href="@Url.Action("Print", new { Id = id })" target="_blank" class="btn btn-primary btn-xs"><i class="fa fa-print"></i></a>
    </p>
    @*</div>*@
}
<style type="text/css">
    .product-invoice-isdeleted {
        text-decoration: line-through;
    }
    select {
        height: 25px;
    }
    .pagination {
        margin: -9px;
    }
</style>
@helper GridColumnName(string name, int id)
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;

    @*<a href="@Url.Action("Detail", "ProductOutbound", new { Id = id })" >@name</a>*@
    <a href="javascript:;" onclick="OpenPopup('@Url.Action("Detail2", "ProductOutbound", new { Id = id ,TransactionCode = name, IsPopup = "true" })', 'Xem chi tiết phiếu xuất', 1000, 650)">@name</a>
}

@helper GridColumnCode(string name)
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;
    Html.RenderAction("Relationship_Report", "Transaction", new { area = "Account", TransactionCode = name });
}
@helper GridColumnType(string type)
{
    switch (type)
    {
        case "manual":
            <span>Khác</span>
            break;
        case "invoice":
        <span>Xuất kho bán hàng</span>
            break;
        case "internal":
        <span>Xuất chuyển kho</span>
            break;
        case "service":
        <span>Xuất cho dịch vụ</span>
            break;
    }
}

@helper GridColumnStaffName(int? userId)
{
    var staff = Common.GetStaffByUserId(userId.Value);
    <span>@(staff != null ? staff.Name : "-")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.TextBox("txtCode", Request["txtCode"], new { @class = "", autocomplete = "off", placeholder = "Mã phiếu xuất..." })
        @Html.TextBox("txtProductCode", Request["txtProductCode"], new { @class = "", autocomplete = "off", placeholder = "Mã sản phẩm..." })
        <span class="input-daterange input-group">
            @Html.TextBox("startDate", Request["startDate"] != null ? Request["startDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Từ ngày" })
            <span class="input-group-addon">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("endDate", Request["endDate"] != null ? Request["endDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Đến ngày" })
        </span>
        @*@Html.DropDownList("warehouseSourceId", warehouseList, new Dictionary<string, object> { { "class", "" }, { "data-val-required", "Bắt buộc chọn." } })*@
        @Html.DropDownList("warehouseDestinationId", warehouseDestinationList, new Dictionary<string, object> { { "class", "" }, { "data-val-required", "Bắt buộc chọn." } })
        <select name="Status" id="Status">
            <option @(Status == "" ? "selected" : "") value="">Tất cả</option>
            <option @(Status == "KT" ? "selected" : "") value="KT">Khởi tạo</option>
            <option @(Status == "DC" ? "selected" : "") value="DC">Đang chuyển</option>
            <option @(Status == "DN" ? "selected" : "") value="DN">Đã nhận</option>
        </select>
    </p>
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}
<div class="table-responsive" id="BCDoanhthu" style="margin-bottom:40px">
    <table id="cTable" class="table table-bordered">
        <thead>
            <tr>
                @*<th style="width:3%;text-align:center">STT</th>*@
                <th style="width:8%;text-align:center">Mã xuất kho</th>
                <th style="width:8%;text-align:center">Mã nhập kho</th>
                <th style="width:30%;text-align:center">từ kho -> đến kho</th>
                <th style="width:4%;text-align:center">Số lượng</th>
                @*<th style="width:70px;text-align:center">Loại phiếu</th>*@

                <th style="width:10%;text-align:center">Trạng thái</th>
                <th style="width:10%">Ngày Chuyển</th>
                <th style="width:10%">Ngày Nhận</th>

                @*<th style="width:8%;text-align:center">Mã chứng từ nhận</th>*@

            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    @*<td style="text-align:center;">@(index++)</td>*@
                    <td style="text-align:center;">@GridColumnName(item.Code, item.Id)</td>
                    @GridColumnCode(item.Code)
                    <td style="font-weight:bold"> @item.WarehouseSourceName -> @item.WarehouseDestinationName</td>
                    <td style="text-align:center;">@item.QuantityProduct</td>
                    <td style="text-align:center;">
                        @if (item.TT == "KT")
                        {
                            <span class="btn btn-primary btn-mini" style=" font-weight:bold;">Khởi tạo</span>
                        }
                        else if (item.TT == "DC")
                        {
                            <span class="btn btn-warning btn-mini" style=" font-weight:bold;">Đang chuyển</span>
                        }
                        else if (item.TT == "DN")
                        {
                            <span class="btn btn-success btn-mini" style="font-weight:bold;">Đã Nhận</span>
                        }


                    </td>
                    <td>@item.CreatedDate.ToString().AsDateTime().ToShortDateString()</td>
                    <td>@item.ModifiedDate.Value.ToString("dd/MM/yyyy HH:mm")</td>





                </tr>
            }
        </tbody>
    </table>
    <!-- Thêm mã phân trang -->
    <br />
    <div class="row" style="width:100%">
        @*<div class="col-md-6 col-lg-6 col-xs-6 col-sm-6">
            @*Trang: @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) / @Model.PageCount
            

        </div>*@
        <div class="col-md-6 col-lg-6 col-xs-6 col-sm-6 text-right" style="float:right;">
            <div style="width: 49%;display: inline-block;">
                <label>Trang</label>
                <input id="trang" name="trang" type="text" style="width :50px; height: 27px" placeholder="@currentPage/@tongPage" />
            </div>
            <div style="width: 18%;display: inline-block;">
                @using (Html.BeginForm("Tinhtrangchuyenkho", "SaleReport", FormMethod.Get))
                {
                    <p>
                        Số dòng: @Html.DropDownList("size", (List<SelectListItem>)ViewBag.size, new { @onchange = "this.form.submit();" })
                    </p>
                }
            </div>
            <div style="width: 30%;display: inline-block;"> @Html.PagedListPager(Model, page => Url.Action("Tinhtrangchuyenkho", new { page, size = ViewBag.currentSize }))</div>
        </div>
    </div>


    <!-- Kết thúc -->
</div>


@*@Html.Grid(Model).Columns(columns =>
    {
        columns.Add().Titled("#").SetWidth(50).RenderValueAs(o =>
             {
                 rowNumber++;

                 return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;
    });
    //columns.Add().Titled(Wording.OrderNo).SetWidth(30).RenderValueAs(n => (++index).ToString());
    columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
    columns.Add().Titled("Loại phiếu").SetWidth(130).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnType(u.Type));
    columns.Add().Titled("Mã chứng từ").SetWidth(130).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id));
    columns.Add().Titled("Mã chứng từ").SetWidth(130).RenderValueAs(u => GridColumnCode(u.Code));
    //columns.Add().Titled("Chứng từ gốc").SetWidth(130).Sanitized(false).Encoded(false).RenderValueAs(n => (n.InvoiceIsDeleted ? "<span style=\"text-decoration: line-through;\">" + n.InvoiceCode + "</span>" : n.InvoiceCode));
    columns.Add(u => u.WarehouseDestinationName).Titled(Wording.WarehouseDestination).SetWidth(200);
    columns.Add(u => u.TotalAmount).Titled(Wording.TotalAmount).SetWidth(100).Sortable(true).RenderValueAs(u => CommonSatic.ToCurrencyStr(u.TotalAmount, null)).Css("text-right");
    columns.Add(u => u.WarehouseSourceName).Titled(Wording.WarehouseSource).SetWidth(150);
    columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
    columns.Add(u => u.IsArchive).Titled("Trạng thái").Sanitized(false).Encoded(false).RenderValueAs(n => (n.IsArchive ? "<span class=\"btn btn-success\" style=\"padding: 0 15px;\"><b>Đã nhận</b></span>" : "<span class=\"btn btn-warning\" style=\"padding:0;\"><b>Đang chuyển</b></span>")).SetWidth(150).Sortable(true).Css("text-center");
    }).WithPaging(20).SetRowCssClasses(item => (((rowNumber == 0 && !string.IsNullOrEmpty(Request["txtCode"])) ? "success" : "") + (item.IsDeleted.HasValue && item.IsDeleted.Value ? "product-invoice-isdeleted" : "")))*@



<script type="text/javascript">
        //Bind keypress event to textbox
    @*$('#trang').keypress(function(event){
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
                var x = document.getElementById('trang').value;
            var url = window.location.href;

            if (url.includes("?grid-page=" +@currentPage) || url.includes("&grid-page=" +@currentPage)) {
                var url = url.replace("grid-page=" +@currentPage,"grid-page=" + x);
            }
            else {
                if (!url.includes("grid-page=") && url.includes("?")) {
                    var url = url + "&grid-page=" + x;
                }
                else {
                    var url = url + "?grid-page=" + x;
                }
            }
            window.location.href = url;
            }

        });*@
    // go to page
    $("#trang").keyup(function () {
        debugger
        //page = $("#gotopage").val();
        var page = $('#trang').val();
        var url = window.location.href;
        if (url.includes("?page=" +@ViewBag.page ) || url.includes("&page=" +@ViewBag.page )) {
            var url = url.replace("page=" +@ViewBag.page, "page=" + page);
        }
        else {
            if (!url.includes("page=") && url.includes("?")) {
                var url = url + "&page=" + page;
            }
            else {
                var url = url + "?page=" + page;
            }
        }
        window.location.href = url;
    });

         $('#SoTrang1').keypress(function(event){
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
                var SoTrang1 = $("#SoTrang1").val();

          $("#SoTrang1").val(SoTrang1);
            $('#numberrowpage1').val(SoTrang1);
           $('#numberrowpage').val(SoTrang1);
           $('#numberrowpage1').trigger('change');
            $('#numberrowpage').trigger('change');
            location.reload();
            }

         });
         $(document).ready(function () {

            var strVal = getCookie("NUMBERROW_INVOICE_CookieName");
            //alert(strVal);
            $('#numberrowpage').val(strVal);
            $('#numberrowpage1').val(strVal);

        });
        //$('#SoTrang1').keyup(function (e) {
        //    var SoTrang1 = $("#SoTrang1").val();

        //  $("#SoTrang1").val(SoTrang1);
        //    $('#numberrowpage1').val(SoTrang1);
        //   $('#numberrowpage').val(SoTrang1);
        //   $('#numberrowpage1').trigger('change');
        //    $('#numberrowpage').trigger('change');
        //    location.reload();
        //});
</script>
@section Scripts {
    <script type="text/javascript">

        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            } else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        };

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            } else {
                return false;
            }

        });

    </script>
    <script src="~/Scripts/jquery.floatThead.js"></script>

    <script>
        $(document).ready(function () {
            $("#cTable").floatThead({ top: 30 });
        });
    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
}
