@model IEnumerable<SupplierViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_Supplier;
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Supplier",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    var jsCallback = Request["jsCallback"] == null ? "" : Request["jsCallback"].ToString();
    int rowNumber = ViewBag.Tongdong;
    int stt = 0;
    int numberOfItem = ViewBag.AmountPage;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
    //if(Request["grid-page"] == null)
    //{
    //    currentPage = 1;
    //}
    //else
    //{
    //    currentPage = Convert.ToInt32(Request["trang"]);
    //}
    int tongPage = (rowNumber / numberOfItem) + 1;
    var top1 = "";
    string Status = Request["Status"] != null ? Request["Status"] : "";
    var url = Request.Url;
    int sopage = ViewBag.AmountPage;
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript">
    /**/

    /**/</script>
<style>
    .pagination {
        margin-top: 14px;
        margin-right: 5px;
    }
</style>
@helper GridColumnCommand(int id, string name)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left; margin-right:5px;">
        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "Supplier", "Sale"))
        {
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        }
    </div>

    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("InboundList", "SaleReport", "Sale"))
        {
            <a class="btn btn-mini btn-info" href="javascript:;" onclick="OpenPopup('@Url.Action("InboundList", "SaleReport", new { supplierId = id, IsPopup = "true" })', 'Lịch sử giao dịch @name', 1000, 500)">Lịch sử giao dịch</a>
        }
    </div>
}

@helper GridColumnName(string name, int id, bool isPopup = false, string jsCallback = null)
{
    name = string.IsNullOrEmpty(name) ? ">No Title" : name;
    if (!isPopup)
    {
        <a href="@Url.Action("Edit", "Supplier", new { Id = id })">@name</a>
    }
    else
    {
        if (!string.IsNullOrEmpty(jsCallback))
        {
            <a onclick="parent.@(jsCallback)(@id, '@name')">@name</a>
        }
        else
        {
            <a onclick="parent.selectLocationItem('@id', '@name','Supplier')">@name</a>
        }
    }
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.TextBox("txtCode", Request["txtCode"], new { autocomplete = "off", placeholder = "Nhập mã NCC..." })
        @Html.TextBox("txtSearch", Request["txtSearch"], new { autocomplete = "off", placeholder = "Nhập tên NCC..." })
        @Html.TextBox("txtPhone", Request["txtPhone"], new { @class = "input-numberic", autocomplete = "off", placeholder = "Nhập số điện thoại..." })
        @Html.TextBox("txtEmail", Request["txtEmail"], new { autocomplete = "off", placeholder = "Nhập email..." })
    </p>
    @Html.TextBox("numberrowpage", Request["numberrowpage"], new { @class = "", id = "numberrowpage", style = "display: none" })
    @Html.TextBox("numberrowpage", Request["numberrowpage"], new { @class = "", id = "numberrowpage1", onchange = "myFunction()", autocomplete = "off", style = "width:30px;display: none ", placeholder = "Số lượng sản phẩm" })

}
@if (!isPopup)
{
    using (Html.BeginForm("Delete", "Supplier", FormMethod.Post, new { DefaultButton = "submit_btn", id = "form" }))
    {
        <div id="test">
            @Html.Grid(Model).Columns(columns =>
               {
                   columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Encoded(false).Sanitized(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
                   columns.Add(u => u.Code).Titled(Wording.Code).Sanitized(false).SetWidth(100);
                   columns.Add().Titled(Wording.Name).Sortable(false).Encoded(false).Sanitized(false).RenderValueAs(u => GridColumnName(u.Name, u.Id));
                   columns.Add(u => u.Phone).Titled(Wording.Phone).Sanitized(false).SetWidth(100);
                   columns.Add(u => u.Email).Titled(Wording.Email).Sanitized(false).SetWidth(100);
                   columns.Add(u => u.CreatedDate).Sanitized(false).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().CreatedDate).ToString()).SetWidth(100);
                   //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
                   columns.Add(u => u.ModifiedDate).Sanitized(false).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedDate).ToString()).SetWidth(100).Sortable(true);
                   columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id, u.Name)).SetWidth(170);
               }).WithPaging(sopage)
        </div>
        <div class="container" style="margin-top: 6px;width: auto;background-color: #eff3f8;height: 60px;/* background-color: aqua; */">


            <div class="row">

                <div style="float:right;margin-right:20px;margin-top:14px">
                    <label>Trang</label>
                    <input id="trang" name="trang" type="text" style="width :50px; height: 27px" placeholder="@currentPage/@tongPage" />
                    <label>Số dòng</label>
                    <input id='SoTrang1' style="width :30px; height: 27px; border: 1px solid #D5D5D5" placeholder=@numberOfItem />
                </div>
            </div>


        </div>
        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "Supplier", "Sale"))
            {
                <a class="btn btn-mini btn-primary" href="@Url.Action("Create", pageSetting.ModuleName)">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </a>
            }
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "Supplier", "Sale"))
            {
                <button class="btn btn-mini btn-danger" type="submit" name="DeleteAll" value="DeleteAll" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash"></i>
                    @Wording.Delete
                </button>
            }
        }
    }
}
else
{
    @Html.Grid(Model).Columns(columns =>
    {
        columns.Add(m => m.Code).Titled(Wording.Code).Sortable(false);
        columns.Add().Titled(Wording.Name).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.CompanyName, u.Id, true, jsCallback));
    }).WithPaging(10)

}
<script>

    $('#test').find('table.table.table-striped.grid-table').first().attr('id', 'CTable');
    $('#test').find('table.table.table-striped.grid-table thead').first().attr('id', 'CTh');

</script>

<script src="~/Scripts/jquery.floatThead.js"></script>

<script>
    $(document).ready(function () {
        $("#CTable").floatThead({ top: 30 });
    });
</script>

@section Scripts {
    <script>
        $(".grid-footer").css({ "float": "right", "width": "auto" });
    </script>
    <script type="text/javascript">
        function myFunction() {
            var x = document.getElementById("numberrowpage1").value;
            document.getElementById("numberrowpage").value = x;
            setCookie("NUMBERROW_INVOICE_CookieName", x, 100);

        }
    </script>
    <script type="text/javascript">
        //Bind keypress event to textbox
        $('#trang').keypress(function(event){
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
                var x = document.getElementById('trang').value;
            var url = window.location.href;

            if (url.includes("?grid-page=" +@currentPage) || url.includes("&grid-page=" +@currentPage)) {
                var url = url.replace("grid-page=" +@currentPage, "grid-page=" + x);
            }
            else {
                if (!url.includes("grid-page=") && url.includes("?")) {
                    var url = url + "&grid-page=" + x;
                }
                else {
                    var url = url + "?grid-page=" + x;
                }
            }
            window.location.href = url;
            }

        });
         $('#SoTrang1').keypress(function(event){
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
                var SoTrang1 = $("#SoTrang1").val();

          $("#SoTrang1").val(SoTrang1);
            $('#numberrowpage1').val(SoTrang1);
           $('#numberrowpage').val(SoTrang1);
           $('#numberrowpage1').trigger('change');
            $('#numberrowpage').trigger('change');
            location.reload();
            }

         });
         $(document).ready(function () {

            var strVal = getCookie("NUMBERROW_INVOICE_CookieName");
            //alert(strVal);
            $('#numberrowpage').val(strVal);
            $('#numberrowpage1').val(strVal);

        });
        //$('#SoTrang1').keyup(function (e) {
        //    var SoTrang1 = $("#SoTrang1").val();

        //  $("#SoTrang1").val(SoTrang1);
        //    $('#numberrowpage1').val(SoTrang1);
        //   $('#numberrowpage').val(SoTrang1);
        //   $('#numberrowpage1').trigger('change');
        //    $('#numberrowpage').trigger('change');
        //    location.reload();
        //});
    </script>
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        $('#form').on('keyup keypress', function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 13) {
                e.preventDefault();
                return false;
            }
        });
        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

    </script>
}
