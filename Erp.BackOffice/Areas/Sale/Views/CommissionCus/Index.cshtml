@model IEnumerable<CommissionCusViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = ViewBag.ApplyFor == "Customer" ? Wording.PageIndex_CommissionCus : "Danh sách Khuyến mãi";
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    //string ApplyFor = ViewBag.ApplyFor;
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "CommissionCus",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = false
    };
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>
@*@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}*@

@helper GridColumnCommand(int id)
{
    <p>
        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Edit", "CommissionCus", "Sale"))
        {
            <a class="btn btn-mini btn-success" href="@Url.Action("Edit", "CommissionCus", new { Id = id })">
                <i class="fa fa-edit"></i>
            </a>
        }
        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "CommissionCus", "Sale"))
        {
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        }
        <div>
            <a class="btn btn-mini btn-primary" title="Kích hoạt" id="check" onclick="oncheck()" href="@Url.Action("ActiveUser", "CommissionCus", new { userId = id })"><i class="ace-icon fa fa-play"></i> </a>
            <a class="btn btn-mini btn-group" title="Dừng" href="@Url.Action("OffUser", "CommissionCus", new { userId = id })"><i class="ace-icon fa fa-stop"></i> </a>
            <a class="btn btn-mini btn-group" title="Xem KMCT" href="@Url.Action("KMCT", "CommissionCus", new { userId = id })"><i class="ace-icon fa fa-star-half-o"></i> </a>
        </div>
    </p>
}

@helper GridColumnName(string name, int id, bool isPopup)
{
    if (isPopup)
    {
        <a onclick="parent.selectBranchItem(@id)">@name</a>
    }
    else
    {
        name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("Detail", "CommissionCus" , new { Id= id })">@name</a>
    }
}
@helper Status(int status)
{
    if (status == 0)
    {
        <p class="text-primary">Khởi tạo</p>
    }
    else if (status == 1)
    {
        <p class="text-success">Kích hoạt</p>
    }
    else if (status == 2)
    {
        <span class="text-danger">dừng</span>
    }
}
@helper GridColumnCategoryValue(string value, string code)
{
    var attr = Common.GetCategoryByValueCodeOrId("value", value, code);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{

}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

@if (!isPopup)
{
    using (Html.BeginForm("Delete", pageSetting.ModuleName, FormMethod.Post))
    {
        @Html.Grid(Model).Columns(columns =>
   {
       columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
       columns.Add().Titled(Wording.Name).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
       //columns.Add(u => u.CreatedUserId).Titled(Wording.CreatedUserId).SetWidth(100).RenderValueAs(u => u.CreatedUserName);
       columns.Add(u => u.Type).Titled(Wording.Type).SetWidth(50);
       //columns.Add(u => u.TIEN_KM).Titled(Wording.GIATRIKHUYENMAI).Sortable(true).SetWidth(100).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.TIEN_KM, null)).Css("text-right");
       //columns.Add(u => u.TIEN_HANG).Titled(Wording.GIATRHANGHOA).Sortable(true).SetWidth(100).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.TIEN_HANG, null)).Css("text-right");
       columns.Add(u => u.StartDate).Format("{0:dd/MM/yyyy HH:mm}").Titled(Wording.StartDate).SetWidth(100);
       columns.Add(u => u.EndDate).Format("{0:dd/MM/yyyy HH:mm}").Titled(Wording.EndDate).SetWidth(100);
       columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(100);
       columns.Add(u => u.status).Titled(Wording.StatusKM).SetWidth(50).Encoded(false).RenderValueAs(n => Status(n.status.Value)).Css("text-center");
       //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
       columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(60).Sortable(true);
       columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
   }).WithPaging(10)

        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "CommissionCus", "Sale"))
            {
                @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Primary, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { onclick = "OpenPopup('" + Url.Action("Create", "CommissionCus", new { IsPopup = true }) + "', '', 0, 0)" })
            }

        }
    }
}
else
{
    @Html.Grid(Model).Columns(columns =>
    {
        //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Name).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
    }).WithPaging(10)
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

        function oncheck() {
            debugger
            var id = $(this).val();
            console.log(id);
            ShowLoading();
            $.ajax({
                type: "POST",
                url: "/CommissionCus/CheckActive",
                data: JSON.stringify({ Id: id }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    HideLoading();
                    if (r == "0") {

                    }
                    else {
                        alert("Có Chương trình khuyến mãi khác đang chạy ");

                    }
                }
            })
        }

    </script>

}
