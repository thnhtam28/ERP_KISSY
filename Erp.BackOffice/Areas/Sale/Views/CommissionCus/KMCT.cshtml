@model IEnumerable<CommissionCusViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title =ViewBag.ApplyFor=="Customer"?Wording.PageIndex_CommissionCus:"Tổng giá trị chiết Khấu theo mã";
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    //string ApplyFor = ViewBag.ApplyFor;
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {        
        ModuleName = "CommissionCus",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = false
    };
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>


@helper GridColumnName(string name, int id, bool isPopup)
{
    if (isPopup)
    {
       <a onclick="parent.selectBranchItem(@id)">@name</a>
    }
    else
    {
        name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("DisCountDetailInvoice", "CommissionCus" , new { Id= id })">@name</a>
    }
}

@helper GridColumnCategoryValue(string value, string code)
{
    var attr = Common.GetCategoryByValueCodeOrId("value", value,code);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using(Html.BeginPageHeaderContainer(pageSetting))
{

}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

@if (!isPopup)
{
    using (Html.BeginForm("Delete", pageSetting.ModuleName, FormMethod.Post))
    {
        @Html.Grid(Model).Columns(columns =>
   {
       columns.Add().Titled(Wording.TEN_CTKM).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.TEN_CTKM, u.Id, isPopup));
       columns.Add().Titled(Wording.TEN_CUAHNG).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.TEN_CUAHNG, u.Id, isPopup));
       columns.Add(u => u.TIEN_KM).Titled(Wording.GIATRIKHUYENMAI).Sortable(true).SetWidth(100).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.TIEN_KM, null)).Css("text-right");
       columns.Add(u => u.TIEN_HANG).Titled(Wording.GIATRHANGHOA).Sortable(true).SetWidth(100).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.TIEN_HANG, null)).Css("text-right");
   }).WithPaging(10)


    }
}
else
{
    @Html.Grid(Model).Columns(columns =>
    {
        //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Name).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
    }).WithPaging(10)
}

@section Scripts {
    <script type="text/javascript">
      

    </script>
}
