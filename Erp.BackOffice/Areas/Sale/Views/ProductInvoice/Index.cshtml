@model List<ProductInvoiceViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_ProductInvoice;
    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "ProductInvoice",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false

    };

    int rowNumber = ViewBag.Tongdong;

    int numberOfItem = ViewBag.AmountPage;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
    //if(Request["grid-page"] == null)
    //{
    //    currentPage = 1;
    //}
    //else
    //{
    //    currentPage = Convert.ToInt32(Request["trang"]);
    //}
    int tongPage = (rowNumber / numberOfItem) + 1;
    var top1 = "";
    string Status = Request["Status"] != null ? Request["Status"] : "";
    var url = Request.Url;
    int sopage = ViewBag.AmountPage;
    string SelectUser = "<select id='selectUser' class='chzn-select' name='selectUser'><option value=''>- Chọn thu ngân -</option><option value>- Tất cả -</option> ";
    foreach (var item in SelectListHelper.GetSelectList_FullUserName(null, null))
    {
        if (Request["UserId"] == item.Value)
        {

            SelectUser += "<option selected value = " + "'" + item.Value + "'" + ">" + item.Text + "</option>";
        }
        else
        {
            SelectUser += "<option value = " + "'" + item.Value + "'" + ">" + item.Text + "</option>";
        }
    }
    SelectUser += "</select> ";

    string SelectStatus = "<select class='chzn-select' name='Status2' id='Status2'>";
    if (Status == "")
    {
        SelectStatus += "<option selected value=''> Tất cả hóa đơn </option>";
        SelectStatus += "<option value='delete'> Đã hủy </option>";
        SelectStatus += "<option value='inprogress'> Đang xử lý </option>";
        SelectStatus += "<option value='pending'> Khởi tạo </option>";
        SelectStatus += "<option value='complete'> Hoàn thành </option>";
    }
    else if (Status == "delete")
    {
        SelectStatus += "<option value=''> Tất cả hóa đơn </option>";
        SelectStatus += "<option selected value='delete'> Đã hủy </option>";
        SelectStatus += "<option value='inprogress'> Đang xử lý </option>";
        SelectStatus += "<option value='pending'> Khởi tạo </option>";
        SelectStatus += "<option value='complete'> Hoàn thành </option>";
    }
    else if (Status == "pending")
    {
        SelectStatus += "<option value=''> Tất cả hóa đơn </option>";
        SelectStatus += "<option value='delete'> Đã hủy </option>";
        SelectStatus += "<option value='inprogress'> Đang xử lý </option>";
        SelectStatus += "<option selected value='pending'> Khởi tạo </option>";
        SelectStatus += "<option  value='complete'> Hoàn thành </option>";
    }
    else if (Status == "complete")
    {
        SelectStatus += "<option value=''> Tất cả hóa đơn </option>";
        SelectStatus += "<option value='delete'> Đã hủy </option>";
        SelectStatus += "<option value='inprogress'> Đang xử lý </option>";
        SelectStatus += "<option value='pending'> Khởi tạo </option>";
        SelectStatus += "<option selected value='complete'> Hoàn thành </option>";
    }
    else if (Status == "inprogress")
    {
        SelectStatus += "<option value=''> Tất cả hóa đơn </option>";
        SelectStatus += "<option value='delete'> Đã hủy </option>";
        SelectStatus += "<option selected value='inprogress'> Đang xử lý </option>";
        SelectStatus += "<option value='pending'> Khởi tạo </option>";
        SelectStatus += "<option  value='complete'> Hoàn thành </option>";
    }
    SelectStatus += "</ select >";
    string SelectBrand = "<select class='chzn-select' id='Brand2' name='Brand2'>";
    if ((Erp.BackOffice.Helpers.Common.CurrentUser.BranchId != null) && (Erp.BackOffice.Helpers.Common.CurrentUser.BranchId != 0))
    {
        foreach (var item in SelectListHelper.GetSelectList_BranchAll(Erp.BackOffice.Helpers.Common.CurrentUser.BranchId, "Cửa Hàng"))
        {

            if (item.Value == Erp.BackOffice.Helpers.Common.CurrentUser.BranchId.ToString())
            {
                SelectBrand += "<option selected value='" + item.Value + "'>" + item.Text + "</option>";

            }
        }

    }
    else
    {
        foreach (var item in SelectListHelper.GetSelectList_BranchAll(0, "Cửa Hàng"))
        {

            SelectBrand += "<option value='" + item.Value + "'>" + item.Text + "</option>";
        }

    }
    SelectBrand += "</select>";
}


<link href="~/assets/css/chosen.min.css" rel="stylesheet" />
<link href="/Scripts/RadCombobox_v1/RadComboBoxLite.css" rel="stylesheet" />
<style type="text/css">
    
    .mini-popup {
        position: relative;
        display: inline;
    }

    #popup_huy {
        position: absolute;
        bottom: 45px;
        left: 0px;
        width: 100px;
        height: 50px;
        max-width: inherit;
        top: inherit;
    }

    #popup_archive {
        position: absolute;
        bottom: 45px;
        left: 0px;
        width: 402px;
        height: 235px;
        max-width: inherit;
        top: inherit;
    }

    .pagination {
        margin-top: 14px;
        margin-right: 5px;
    }
</style>
<style type="text/css">
    .product-invoice-isdeleted {
        text-decoration: line-through;
    }

    .chosen-drop {
        width: 250px !important;
        /*display: none !important;*/
        /*margin: 0px 0px 0px 10px;*/
    }

    .product-search-box b {
        visibility: hidden;
    }

    #UserId_chosen {
        display: none;
    }

    .chosen-single {
        /*display: none !important;*/
    }

    #numberrowpage1 {
        display: none !important;
    }

    #SoTrang1 {
        width: 50px;
    }

    #tongSL, #tongTien, #tongTra {
        color: #428bca;
    }

    #tongSL {
        width: 10%;
    }

    #tongtien, #tientra, #tongthu {
        width: 15%;
    }

    .Footer-Total {
        color: black;
    }

    .valBold, txtBold {
        font-weight: bold;
    }

    .valBold {
        color: #428bca;
    }

    #CTable {
        white-space: nowrap;
        width: 100%;
        display: inline-block;
        overflow: scroll;
        
    }
    
</style>
<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>

@*@helper GridColumnName(int? customerid, string customername, string name, int id, string note, string reason, bool isPopup = false, string jsCallback = null)
    {
        if (isPopup)
        {
            <a onclick="parent.selectItemCustomer(@id, '@name','@customername','@customerid')">@name</a>
        }
        else
        {
            name = string.IsNullOrEmpty(name) ? "No Title" : name;
            <a href="@Url.Action("Detail", "ProductInvoice", new { Id = id })">@name</a>

            if (!string.IsNullOrEmpty(note) || !string.IsNullOrEmpty(reason))
            {
                note = note + "; " + reason;
                <span class="help-button" data-rel="tooltip" data-placement="bottom" data-original-title="@note">?</span>
            }
        }

    }*@
@helper GridColumnCommand(int id)
{
    @*<a onclick="printInvoice(@id)" class="btn btn-primary btn-mini"><i class="fa fa-print"></i></a>*@

    <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
        <i class="ace-icon fa fa-trash"></i>
    </button>
}
@helper CollapseDetails(int Id)
{

    <a class="green show-details-btn" title="Chi tiết" data-id="@Id">
        <i class="ace-icon fa fa-angle-double-down bigger-120"></i>
    </a>
   
    
    @*<a href="@Url.Action("GetOrderDetailsByOrderId", "PurchaseOrder", new { Id = Id })">
        <i class="ace-icon fa fa-angle-double-down bigger-120"></i>
    </a>
    *@
   
    
  
   
    
}
@helper GridColumnName(string name, int id, string note, string reason)
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;
    <a href="@Url.Action("Detail", "ProductInvoice", new { Id = id })">@name</a>

    if (!string.IsNullOrEmpty(note) || !string.IsNullOrEmpty(reason))
    {
        note = note + "; " + reason;
        <span class="help-button" data-rel="tooltip" data-placement="bottom" data-original-title="@note">?</span>
    }
}
@*@helper GridCreatedUserId(int id) {

        foreach(var item in Model.System_User)
        {
            @item.UserName;
        }
    }*@

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@helper GridColumnStatusName(string status)
{
    switch (status)
    {
        case "pending":
            <span class="label label-info">@Wording.OrderStatusDisplay_pending</span>
            break;
        case "inprogress":
            <span class="label label-warning">@Wording.OrderStatusDisplay_inprogress</span>
            break;
        case "shipping":
            <span class="label label-warning">@Wording.OrderStatusDisplay_shipping</span>
            break;
        case "complete":
            <span class="label label-success">@Wording.OrderStatusDisplay_complete</span>
            break;
        case "delete":
            <span class="label label-danger">@Wording.OrderStatusDisplay_delete</span>
            break;
    }
}
@helper GridPrint(int Id)
{
    <a id="printa" class="btn btn-primary btn-mini" onclick="openpoupmy(@Id)">
        <i class="ace-icon fa fa-print"></i>

    </a>
}
@helper renderCustomer(int? Id, string CustomerName, string Address, bool? Gender, string Mobile, DateTime? Birthday, string CustomerCode, string Email, string Note)
{


    <a href="#" class="myPopover" data-toggle="popover" title="Thông tin khách hàng" data-placement="left" data-trigger="hover" data-html="true" data-popover-content="#@Id">@CustomerName</a>
    //javascript:getdata(@Id)
    <div id="@Id" style="display:none;" class="popupCus">
        <div class="container" style="width: 300px">
            <div class="form-group row">
                <label class="col-sm-4 col-form-label FontSmaller"><strong>Tên:</strong></label>
                <div class="col-sm-8 FontSmaller">
                    <p style="color:blue"><strong>@CustomerName</strong></p>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label FontSmaller"><strong>Mã khách hàng:</strong></label>
                <div class="col-sm-8 FontSmaller">
                    <p style="color:red"><strong>@CustomerCode</strong></p>
                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label FontSmaller"><strong>Di động:</strong></label>
                <div class="col-sm-8 r">
                    <p style="color:red"><strong>@Mobile</strong></p>
                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label FontSmaller"><strong>Email:</strong></label>
                <div class="col-sm-8 r">
                    @if (Email == null)
                    {
                        <p><strong>(chưa có)</strong></p>
                    }
                    else
                    {
                        <p><strong>@Email</strong></p>
                    }
                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label FontSmaller"><strong>Địa chỉ:</strong></label>
                <div class="col-sm-8 FontSmaller">
                    @if (Address == null)
                    {
                        <p>(chưa có)</p>
                    }
                    else
                    {
                        <p>@Address</p>
                    }
                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label FontSmaller"><strong>Ngày sinh:</strong></label>
                <div class="col-sm-8 FontSmaller">
                    @if (Birthday == null)
                    {
                        <p>(chưa có)</p>
                    }
                    else
                    {
                        <p>@Birthday</p>
                    }
                </div>
            </div>
            <div class="form-group row">
                <label for="inputPassword" class="col-sm-4 col-form-label FontSmaller"><strong>Giới Tính:</strong></label>
                <div class="col-sm-8 FontSmaller">
                    @if (Gender == false)
                    {
                        <p>Nam</p>

                    }
                    else
                    {
                        <p>Nữ</p>
                    }
                </div>

            </div>
            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label FontSmaller"><strong>Ghi chú:</strong></label>
                <div class="col-sm-8 FontSmaller">
                    @if (Note == "")
                    {
                        <p>(chưa có)</p>
                    }
                    else
                    {
                        <p><light>@Note</light></p>
                    }

                </div>
            </div>


        </div>
    </div>



}
@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.TextBox("txtCode", Request["txtCode"], new { @class = "input-group", autocomplete = "off", placeholder = "Mã đơn hàng..." })
        @Html.TextBox("txtCusName", Request["txtCusName"], new { @class = "input-group", autocomplete = "off", placeholder = "Tên khách hàng..." })

        <select name="Status" id="Status" style="display:none">
            <option @(Status == "" ? "selected" : "") value="">Tất cả hóa đơn</option>
            <option @(Status == "delete" ? "selected" : "") value="delete">Đã hủy</option>
            <option @(Status == "pending" ? "selected" : "") value="pending">Khởi tạo</option>
            <option @(Status == "inprogress" ? "selected" : "") value="inprogress">Đang sử lý</option>
            <option @(Status == "complete" ? "selected" : "") value="complete">Hoàn thành</option>
            @*<option @(Status == "dc" ? "selected" : "") value="dc">Hóa đơn đặt cọc</option>*@
        </select>
        <select class="chzn-select" style="float:left; display:none" name="UserId">
            <option value="">- Thu Ngân -</option>
            @foreach (var item in SelectListHelper.GetSelectList_FullUserName(null, null))
            {
                <option @(Request["UserId"] == item.Value ? "Selected" : "") value="@item.Value">@item.Text</option>
            }
        </select>
        <span class="input-daterange input-group">
            @Html.TextBox("startDate", Request["startDate"] != null ? Request["startDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Từ ngày..." })
            <span class="input-group-addon">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("endDate", Request["endDate"] != null ? Request["endDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Đến ngày..." })
        </span>
        <span class="input-group">
            @Html.TextBox("txtMinAmount", Request["txtMinAmount"] != null ? Request["txtMinAmount"] : "0", new { @class = "input-price text-right", autocomplete = "off", placeholder = "Tổng tiền từ..." })
            <span class="input-group-addon">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("txtMaxAmount", Request["txtMaxAmount"] != null ? Request["txtMaxAmount"] : "0", new { @class = "input-price text-right", autocomplete = "off", placeholder = "Tổng tiền từ..." })

        </span>
        @*@Html.DropDownList("UserId", SelectListHelper.GetSelectList_User(Request["UserId"], "Thu Ngân"), new { @class = "chzn-select"})*@
        @Html.TextBox("numberrowpage", Request["numberrowpage"], new { @class = "", id = "numberrowpage", style = "display: none" })

    </p>

}

@Html.TextBox("numberrowpage", Request["numberrowpage"], new { @class = "", id = "numberrowpage1", onchange = "myFunction()", autocomplete = "off", style = "", placeholder = "Số lượng sản phẩm" })

<p></p>
@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

@*@using (Html.BeginForm("Delete", "ProductInvoice", FormMethod.Post))
    {*@

<div id="test">
    @Html.Grid(Model).Columns(columns =>
            {
        @*columns.Add(u => u.Id).Titled("<input id='SoTrang1' placeholder='Số'/>").SetWidth(50).Sanitized(false).Encoded(false).RenderValueAs(o =>
                        {
                        rowNumber++;

                        return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) @CollapseDetails(o.Id) </text>;
            });*@
//columns.Add().Titled("Chi tiết").SetWidth(10).Sanitized(false).Encoded(false).RenderValueAs(n => CollapseDetails(n.Id)).Css("text-center");

columns.Add().Titled("Mã đơn hàng").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => /* GridColumnName(u.Code, u.Id, u.Note, u.CancelReason)).SetWidth(140)*/
{
return @<text> @(GridColumnName(u.Code, u.Id, u.Note, u.CancelReason)) @CollapseDetails(u.Id) </text>;
});
columns.Add(u => u.CreatedDateTemp).Titled("Ngày bán").SetWidth(130);
columns.Add().Titled(Wording.Customer).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(n => renderCustomer(n.Id, n.CustomerName, n.Address, n.Gender, n.Mobile, n.Birthday, n.CustomerCode, n.Email, n.Note));
columns.Add(u => u.UserName).Titled(SelectUser).SetWidth(140);
columns.Add(n => n.BranchName).Titled(SelectBrand).SetWidth(100).Sanitized(false).Encoded(false);
columns.Add().Titled(SelectStatus).SetWidth(100).Sanitized(false).Encoded(false).RenderValueAs(n => GridColumnStatusName(n.Status));
//columns.Add().Titled(Wording.CompanyName).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(n => renderCusstomer(n.CustomerId, n.CompanyName));
//columns.Add().Titled(Wording.Diachidonhang).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(n => n.Address + ".  ĐT: " + n.CustomerPhone + ".  Email: " + n.Email);

columns.Add(u => u.TotalAmount).Titled(Wording.TotalAmount).Sortable(true).SetWidth(100).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.TotalAmount, null)).Css("text-right");
//columns.Add().Titled("CT xuất kho").Sanitized(false).Encoded(false).RenderValueAs(n => string.Format("<a href=\"/ProductOutbound/Detail/{0}\" target=\"_blank\">{1}</a>", n.ProductOutboundId, n.ProductOutboundCode)).SetWidth(120);
//columns.Add().Titled(Wording.DrugStore).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(n => n.BranchName);

//columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
//columns.Add(u => u.IsArchive).Titled("TT ghi sổ").Sanitized(false).Encoded(false).RenderValueAs(n => (n.IsArchive ? "<span style=\"color:green\"><b>Đã ghi sổ</b></span>" : "<span style=\"color:red\"><b>Chưa ghi sổ</b></span>")).SetWidth(90).Sortable(true);
columns.Add().Titled("").SetWidth(40).Sanitized(false).Encoded(false).RenderValueAs(n => GridPrint(n.Id));
}).WithPaging(sopage).SetRowCssClasses(item => (item.IsDeleted.HasValue && item.IsDeleted.Value ? "product-invoice-isdeleted" : ""))
    @*<div class="mini-popup">
            <a href="#" class="btn btn-sm btn-primary" data-toggle="collapse" data-target="#popup_huy" style="color: red !important;">
                <span class="glyphicon glyphicon-chevron-up"></span>
            </a>
        </div>*@

</div>
<div class="container" style="margin-top: 6px;width: auto;background-color: #eff3f8;height: 60px;/* background-color: aqua; */">

    <div>
        <div class="row">
            <div class="row" style="float:left;margin-top: 16px;margin-left: 13px;">


                <p style="float:left">Tổng SL:&nbsp;</p> <p style="float:left;color: red">@Erp.BackOffice.Helpers.Common.PhanCachHangNgan2(ViewBag.TongSL)</p>
                <p style="float:left;color:darkgray">||</p>
                <p style="float:left">Tổng tiền:&nbsp;</p><p style="float:left;color: red">@Erp.BackOffice.Helpers.Common.PhanCachHangNgan2(ViewBag.tongtien)</p>
                <p style="float:left;color:darkgray">||</p>
                <p style="float:left">Tổng trả:&nbsp;</p>  <p style="float:left;color: red"> @Erp.BackOffice.Helpers.Common.PhanCachHangNgan2(ViewBag.tientra) </p>
                <p style="float:left;color:darkgray">||</p>
                <p style="float:left">Tổng thu:&nbsp;</p> <p style="float:left;color: red">@Erp.BackOffice.Helpers.Common.PhanCachHangNgan2(ViewBag.tongthu)</p>
            </div>
            <div style="float:right;margin-right:20px;margin-top:14px">
                <label>Trang</label>
                <input id="trang" name="trang" type="text" style="width :50px; height: 27px" placeholder="@currentPage/@tongPage" />
                <label>Số dòng</label>
                <input id='SoTrang1' style="width :30px; height: 27px;border: 1px solid #D5D5D5" placeholder="@numberOfItem" />
            </div>
        </div>

    </div>
</div>




<script>

    $('#test').find('table.table.table-striped.grid-table').first().attr('id', 'CTable');
    $('#test').find('table.table.table-striped.grid-table thead').first().attr('id', 'CTh');
</script>

<script src="~/Scripts/jquery.freezeheader.js"></script>
<script>
    $(document).ready(function () {
        $("#CTable").freezeHeader({ 'offset': '30px' });
    })
</script>
@using (Html.BeginButtonContainer(pageSetting))
{
    if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("CreateNT", "ProductInvoice", "Sale"))
    {

        <a style="float: left;margin-top:1px" class="btn btn-mini btn-primary" href="@Url.Action("CreateNT", pageSetting.ModuleName)">
            <i class="ace-icon fa fa-plus"></i>
            Tạo mới [F2]
        </a>
        <button style="float: left;margin-left: 20px" class="btn btn-white btn-success btn-sm" type="button" value="Export" onclick="exportThis()">
            <i class="ace-icon fa fa-file-excel-o"></i>
            Xuất excel
        </button>

    }
    @*if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("UpdateAll", "ProductInvoice", "Sale"))
        {
            using (Html.BeginForm("UpdateAll", "ProductInvoice", FormMethod.Post))
            {
                @Html.Hidden("url", url)
                <button class="btn btn-mini btn-primary" type="submit" name="Submit" value="Save">
                    <i class="ace-icon fa fa-save"></i>
                    Đồng bộ kho
                </button>
            }
        }*@
}
@*}*@

@section Scripts {
    <script>
        $(".grid-footer").css({ "float": "right", "width": "auto" });
    </script>
    <script>
        function openpoupmy(pId) {
            OpenPopup('/ProductInvoice/Print?Id=' + pId + '&ExportExcel=false', 'Tìm kiếm dữ liệu', 500, 500);

            setTimeout(function () {

                $('#myModal').modal('hide');
            }, 500);
        }

    </script>
    <script>
        @*function openpage() {
            var x = document.getElementById('trang').value;
            var url = window.location.href;

            if (url.includes("?grid-page=" +@currentPage) || url.includes("&grid-page=" +@currentPage)) {
                var url = url.replace("grid-page=" +@currentPage, "grid-page=" + x);
            }
            else {
                if (!url.includes("grid-page=") && url.includes("?")) {
                    var url = url + "&grid-page=" + x;
                }
                else {
                    var url = url + "?grid-page=" + x;
                }
            }
            window.location.href = url;
        }*@
    </script>
    <script type="text/javascript">
        function myFunction() {
            var x = document.getElementById("numberrowpage1").value;
            document.getElementById("numberrowpage").value = x;
            setCookie("NUMBERROW_INVOICE_CookieName", x, 100);
        }
    </script>
    <script type="text/javascript">
        //Bind keypress event to textbox
        $('#trang').keypress(function(event){
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
                var x = document.getElementById('trang').value;
            var url = window.location.href;

            if (url.includes("?grid-page=" +@currentPage) || url.includes("&grid-page=" +@currentPage)) {
                var url = url.replace("grid-page=" +@currentPage, "grid-page=" + x);
            }
            else {
                if (!url.includes("grid-page=") && url.includes("?")) {
                    var url = url + "&grid-page=" + x;
                }
                else {
                    var url = url + "?grid-page=" + x;
                }
            }
            window.location.href = url;
            }

        });
         $('#SoTrang1').keypress(function(event){
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
                var SoTrang1 = $("#SoTrang1").val();

          $("#SoTrang1").val(SoTrang1);
            $('#numberrowpage1').val(SoTrang1);
           $('#numberrowpage').val(SoTrang1);
           $('#numberrowpage1').trigger('change');
            $('#numberrowpage').trigger('change');
            location.reload();
            }

        });
        //$('#SoTrang1').keyup(function (e) {
        //    var SoTrang1 = $("#SoTrang1").val();

        //  $("#SoTrang1").val(SoTrang1);
        //    $('#numberrowpage1').val(SoTrang1);
        //   $('#numberrowpage').val(SoTrang1);
        //   $('#numberrowpage1').trigger('change');
        //    $('#numberrowpage').trigger('change');
        //    location.reload();
        //});
    </script>
    <script type="text/javascript">

    </script>
    <script type="text/javascript">
        $(function () {
            $('[data-rel=tooltip]').tooltip({ container: 'body' });

            $(window).keydown(function (e) {
                if (e.which == 113) {
                    e.preventDefault();
                    window.location = '@Url.Action("Create")';
                }
            });
        });
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })
        $(function () {
            $("#txtCode").focus().select();
            $('[data-rel=tooltip]').tooltip({ container: 'body' });
            $("#txtCode").click(function () {
                $("#txtCode").select();
            });
        });


        $(document).ready(function () {

            var strVal = getCookie("NUMBERROW_INVOICE_CookieName");
            //alert(strVal);
            $('#numberrowpage').val(strVal);
            $('#numberrowpage1').val(strVal);
            var select = $("#BRANCH_ID option:selected").val();
            $('select[name="Brand2"]').val(select);
            $('#SoTrang1').val(strVal);

        });


    </script>
    <script>
        //format currency
        var format = function (num) {

            var str = num.toString().replace("$", ""), parts = false, output = [], i = 1, formatted = null;
            if (str.indexOf(".") > 0) {
                parts = str.split(".");
                str = parts[0];
            }
            str = str.split("").reverse();
            for (var j = 0, len = str.length; j < len; j++) {
                if (str[j] != ".") {
                    output.push(str[j]);
                    if (i % 3 == 0 && j < (len - 1)) {
                        output.push(".");
                    }
                    i++;
                }
            }
            formatted = output.reverse().join("");
            return (formatted + ((parts) ? "." + parts[1].substr(0, 2) : ""));
        };
        // end format currency
        $(".show-details-btn").on("click", function (e) {

            var Id = $(this).data("id");
            var clicks = $(this).data('clicks');
            if (clicks) {
                $("#Details-" + Id).remove();
                $('.grid-row-selected').find(ace.vars['.icon']).toggleClass('fa-angle-double-up').toggleClass('fa-angle-double-down');
            } else {

                console.log(Id);
                e.preventDefault();
                //get load detail productInvoice
                $.ajax({

                    url: '/ProductInvoice/GetListJsonInvoiceDetailById/' + Id,
                    dataType: "json",
                    type: "GET",
                    contentType: 'application/json; charset=utf-8',
                    async: true,
                    success: function (data) {
                        console.log(data);
                        var trHTML = '';
                        trHTML += '<tr id="Details-' + Id + '" class="open" >';
                        trHTML += '<td colspan="11">';
                        trHTML += '<div class="table-detail clearfix">'
                        trHTML += '<div class="row">';
                        trHTML += ' <table id="tableDetail" class="table table-striped grid-table">';
                        trHTML += ' <thead>';
                        trHTML += ' <tr><th class="grid-header">Mã sản phẩm</th> <th class="grid-header">Tên Sản Phẩm</th><th class="grid-header">Màu</th><th class="grid-header">Kích cỡ</th><th class="grid-header">SL</th><th class="grid-header">Đơn Giá</th> <th class="grid-header">% CK</th><th class="grid-header">Thành tiền</th></tr> ';
                        trHTML += ' <tbody id="listDetail">';
                        $.each(data, function (i, item) {
                            var price = parseFloat(item.Price);

                            trHTML += '<tr class="grid-row"><td class="grid-cell">' + item.ProductCode + '</td><td class="grid-cell">' + item.ProductName + '</td><td class="grid-cell">' + item.color + '</td><td class="grid-cell">' + item.Size + '</td><td class="grid-cell">' + item.Quantity + '</td><td lass="grid-cell">' + format(price) + '</td><td lass="grid-cell">' + format(item.IrregularDiscountAmount) + '</td><td lass="grid-cell">' + format(item.Quantity * item.Price - item.IrregularDiscountAmount) + '</td></tr>';

                        });
                        trHTML += '</tbody>';
                        trHTML += '</table>';
                        trHTML += '</div>';
                        trHTML += '</div>';
                        trHTML += '</td>';
                        trHTML += '</tr>';
                        //$('#tableDetail tbody').append(trHTML);
                       $('.grid-row-selected').find(ace.vars['.icon']).toggleClass('fa-angle-double-down').toggleClass('fa-angle-double-up');
                       $('.grid-row-selected').closest('.grid-row-selected').after(trHTML);
                        //alert(trHTML);
                       
                    },
                    error: function (xhr) {
                        alert('error');
                    }
                });
            }
            $(this).data("clicks", !clicks);




        })

        //-------------------------------------------
        // end format currency
        //$(".show-details-btn").on("click", function (e) {
        //    debugger
        //        var Id = $(this).data("id");
        //        var clicks = $(this).data('clicks');
        //        if (clicks) {
        //            $("#Details-" + Id).remove();
        //        } else {
        //            debugger

        //            console.log(Id);
        //            e.preventDefault();
        //            //get load detail productInvoice
        //            $.ajax({
        //                url: '/ProductInvoice/GetListJsonInvoiceDetailById/' + Id,
        //                dataType: "json",
        //                type: "GET",
        //                contentType: 'application/json; charset=utf-8',
        //                async: true,
        //                success: function (data) {
        //                    console.log(data);

        //                    var trHTML = '';
        //                    trHTML += '<tr id="Details-' + Id + '" class="open" >';
        //                    trHTML += '<td colspan="11">';
        //                    trHTML += '<div class="table-detail clearfix">'
        //                    trHTML += '<div class="row">';
        //                    trHTML += ' <table id="tableDetail" class="table table-striped grid-table">';
        //                    trHTML += ' <thead>';
        //                    trHTML += ' <tr><th class="grid-header">ID</th> <th class="grid-header">Tên Sản Phẩm</th><th class="grid-header">Xuất xứ</th><th class="grid-header">SL</th><th class="grid-header">Đơn Giá</th><th class="grid-header">Loại</th> <th class="grid-header">% CK</th><th class="grid-header">Thành tiền</th></tr> ';
        //                    trHTML += ' <tbody id="listDetail">';
        //                    $.each(data, function (i, item) {
        //                        var price = parseFloat(item.Price);
        //                        trHTML += '<tr class="grid-row"><td class="grid-cell">' + item.Id + '</td><td class="grid-cell">' + item.ProductName + '</td><td class="grid-cell">' + item.Origin + '</td></td><td class="grid-cell">' + item.Quantity + '</td><td lass="grid-cell">' + format(price) + '</td><td lass="grid-cell">' + item.Unit + '</td><td lass="grid-cell">' + format(item.IrregularDiscountAmount) + '</td><td lass="grid-cell">' + format(item.Quantity * item.Price - item.IrregularDiscountAmount) + '</td></tr>';

        //                    });
        //                    trHTML += '</tbody>';
        //                    trHTML += '</table>';
        //                    trHTML += '</div>';
        //                    trHTML += '</div>';
        //                    trHTML += '</td>';
        //                    trHTML += '</tr>';
        //                    //$('#tableDetail tbody').append(trHTML);
        //                    $('.grid-row-selected').closest('.grid-row-selected').after(trHTML);
        //                },
        //                error: function (xhr) {
        //                    //alert('error');
        //                }
        //            });
        //        }
        //        $(this).data("clicks", !clicks);
        //   })



    </script>
    <script>

        $('.myPopover').popover({
            html: true,
            content: function () {
                var elementId = $(this).attr("data-popover-content");
                return $(elementId).html();
            }
        });
    </script>
    <script>
        $('select[name="UserId"]').on('change', function () {
            if ($(this).find(":selected").val()) {
                $('button[name="search"]').trigger("click");
            } else if ($(this).find(":selected").val() == "") {

                $('button[name="search"]').trigger("click");
            }
        });
        $('select[name="Status"]').on('change', function () {
            if ($(this).find(":selected").val()) {
                $('button[name="search"]').trigger("click");
            } else if ($(this).find(":selected").val() == "") {

                $('button[name="search"]').trigger("click");
            }
        });
        $('#selectUser').on('change', function () {
            select = $("#selectUser option:selected").val();
            $('#UserId option[value="' + select + ']"').attr('selected', 'selected');
            $('select[name="UserId"]').val(select);
            $('select[name="UserId"]').trigger('change');
        });
        $('#Status2').on('change', function () {
            select = $("#Status2 option:selected").val();
            $('select[name="Status"]').val(select);
            $('select[name="Status"]').trigger('change');
        });
        $('#Brand2').on('change', function () {
            select = $("#Brand2 option:selected").val();
            $('select[name="BRANCH_ID"]').val(select);
            $('select[name="BRANCH_ID"]').trigger('change');
        });
        //$('#SoTrang1').keydown(function (e) {
        //    $('#SoTrang1').trigger('change');
        //});
        //$('#SoTrang1').keypress(function (e) {
        //    $('#SoTrang1').trigger('change');
        //});


        var exportThis = (function () {
        var uri = 'data:application/vnd.ms-excel;base64,',
            template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel"  xmlns="http://www.w3.org/TR/REC-html40"><head> <!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets> <x:ExcelWorksheet><x:Name>{worksheet}</x:Name> <x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions> </x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook> </xml><![endif]--></head><body> <table>{table}</table></body></html>',
            base64 = function (s) {
                return window.btoa(unescape(encodeURIComponent(s)))
            },
            format = function (s, c) {
                return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; })
            }
              return function () {

                  ShowLoading();
                  var txtCode = $("#txtCode").val();
                  var txtMinAmount = $("#txtMinAmount").val();
                  var txtMaxAmount = $("#txtMaxAmount").val();
                  var txtCusName = $("#txtCode").val();
                  var startDate = $("#startDate").val();
                  var endDate = $("#endDate").val();
                  var BranchId = $('select[name="BRANCH_ID"]').val();
                  var Status = $("#Status option:selected").val();
                  var UserId = $('select[name="UserId"]').val();

                  var txtBranchId = $('#BRANCH_ID option:selected').text();
                  var textStatus = $('#Status option:selected').text();
                  var textUserId = $('select[name="UserId"] option:selected').text();

                  var TongSL = @ViewBag.TongSL;
                  var tbody = '<div style="font-family:Times New Roman, Times, serif; font-size:14px">';
                  $("#selectUser option:selected").val();
                  $.ajax({

                      type: "POST",
                      async: false,
                      url: "/ProductInvoice/ExportExcelInvoice",
                      data: JSON.stringify({
                          txtCode: txtCode, txtMinAmount: txtMinAmount, txtMaxAmount: txtMaxAmount,
                          txtCusName: txtCusName, startDate: startDate, endDate: endDate,
                          BranchId: BranchId, Status: Status, UserId: UserId, TongSL: TongSL
                      }),
                      contentType: "application/json; charset=utf-8",
                      dataType: "json",
                      success: function (r) {
                          tbody += '<table> <thead> <tr>';
                          tbody += '<th> STT </th>';
                          tbody += '<th> Mã đơn hàng </th>';
                          tbody += '<th>' + textUserId +'</th>';
                          tbody += '<th>' + txtBranchId +'</th>';
                          tbody += '<th>' + textStatus + '</th>';
                          tbody += '<th> Khách hàng </th>';
                          tbody += '<th> Tổng tiền </th>';
                          tbody += '<th> Chi tiết xuất kho </th>';
                          tbody += '<th> Ngày tạo </th>';
                          tbody += '<th> Ngày cập nhật </th>';
                          tbody += '<th> Thông tin ghi sổ </th>';
                          tbody += '</tr> </thead> <tbody>';

                          if (r != null && r.length != 0) {
                              for (i = 0; i < r.length; i++) {
                                  var stt = i + 1;
                                  tbody += '<tr class="grid-row ">';
                                  tbody += '<td class="grid-cell" data-name="Id">' + stt + '</td>';
                                  tbody += '<td class="grid-cell" data-name="Id">' + r[i].Code + '</td>';
                                  tbody += '<td class="grid-cell" data-name="Id">' + r[i].UserName + '</td>';
                                  tbody += '<td class="grid-cell" data-name="Id">' + r[i].BranchName + '</td>';
                                  if (r[i].Status == 'complete') {
                                      tbody += '<td class="grid-cell" data-name="Id"> Thành công </td>';
                                  }
                                  else if (r[i].Status == 'pending') {
                                      tbody += '<td class="grid-cell" data-name="Id">  Khởi tạo </td>';
                                  }
                                  else if (r[i].Status == 'inprogress') {
                                      tbody += '<td class="grid-cell" data-name="Id"> Đang xử lý</td>';
                                  }
                                  else if (r[i].Status == 'delete') {
                                      tbody += '<td class="grid-cell" data-name="Id"> Đã hủy </td>';
                                  }
                                  tbody += '<td class="grid-cell" data-name="Id">' + r[i].CustomerName + '</td>';
                                  tbody += '<td class="grid-cell" data-name="Id">' + r[i].TotalAmount + '</td>';
                                  tbody += '<td class="grid-cell" data-name="Id">' + r[i].ProductOutboundCode + '</td>';
                                  tbody += '<td class="grid-cell" data-name="Id">' + r[i].CreatedDateTemp + '</td>';
                                  tbody += '<td class="grid-cell" data-name="Id">' + r[i].strModifiedDate + '</td>';
                                  if (r[i].IsArchive == 1) {
                                      tbody += '<td class="grid-cell" data-name="Id"> Đã ghi sổ </td>';
                                  }
                                  else {
                                      tbody += '<td class="grid-cell" data-name="Id"> Chưa ghi sổ </td>';
                                  }
                                  tbody += '</tr>';
                              }
                          }
                          tbody += '<th></th><th></th><th></th><th></th><th></th><th class="txtBold">Tổng tiền</th>';
                          tbody += '<th class="grid-cell" data-name="Id" class="valBold">' + @ViewBag.tongtien + '</th>';
                          tbody += '<th class="txtBold">Tổng trả</th>';
                          tbody += '<th class="grid-cell" data-name="Id" class="valBold">' + @ViewBag.tientra + '</th>';
                          tbody += '<th class="txtBold">Tổng thu</th>';
                          tbody += '<th class="grid-cell" data-name="Id" class="valBold">' + @ViewBag.tongthu + '</th>';
                          tbody += '</tbody>';
                          tbody += '</table>';
                          tbody += '</div>';
                      },
                      error: function (xhr) {
                          alert('error');
                      }
                  });
                  HideLoading();
                  var ctx = { worksheet: '@ViewBag.Title' || 'Worksheet', table: tbody }
                  window.location.href = uri + base64(format(template, ctx));

              }
        })()

        $("#CTable").scroll(function () {
                       alert('scrool Parent' + $(window).scrollTo());
        });
    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
}
