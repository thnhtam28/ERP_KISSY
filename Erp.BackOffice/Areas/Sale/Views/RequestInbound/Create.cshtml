@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Sale.Models

@model RequestInboundViewModel

@{
    ViewBag.isGiaNhap = Erp.BackOffice.Helpers.Common.GetSetting("hiden_gianhap");
    if (Model.Id > 0)
    {
        ViewBag.Title = "Cập nhật yêu cầu nhập kho";
    }
    else
    {
        ViewBag.Title = "Tạo yêu cầu nhập kho";
    }
    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "RequestInbound",
        ActionName = "Create",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = true
    };
    //IEnumerable<PurchaseOrderViewModel> orderList = (IEnumerable<PurchaseOrderViewModel>)ViewBag.orderList;
    IEnumerable<SelectListItem> warehouseList = (IEnumerable<SelectListItem>)ViewBag.warehouseList;
    IEnumerable<SelectListItem> supplierList = (IEnumerable<SelectListItem>)ViewBag.supplierList;
    //IEnumerable<SelectListItem> drugStoreList = Erp.BackOffice.Helpers.SelectListHelper.GetSelectList_DepartmentAllNew(Model.BranchId, Wording.Empty);
    List<ProductViewModel> productList = (List<ProductViewModel>)ViewBag.productList;
    IEnumerable<SelectListItem> productCategoryList = Erp.BackOffice.Helpers.Common.GetSelectList_Category("product", null, "value");
}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
}
<style type="text/css">
    .row {
        width: 100%;
    }

    .col-sm-7 {
        width: 58%;
        float: left;
    }

    .col-sm-5 {
        width: 40%;
        float: left;
    }

    #success-alert, #danger-alert {
        position: fixed;
        top: 5%;
        z-index: 5;
        display: none;
        z-index: 10;
    }

    #success-alert {
        left: 39.2%;
    }

    #danger-alert {
        left: 35%;
        height: 10%;
    }
    .rcb {
        display: inline-table;
        position: absolute;
        margin: -21px 0px;
    }
</style>
<div class="alert alert-danger" id="danger-alert">
    @*<button type="button" class="close" data-dismiss="alert">x</button>*@
    <strong>Vui lòng chọn sản phẩm </strong>

</div>
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}

@using (Html.BeginForm_AceStyle((string)ViewBag.Title, pageSetting.ActionName, pageSetting.ModuleName, null, FormMethod.Post, new { id = "CreateRequestInbound", @class = "form-horizontal" }))
{
    @Html.ValidationSummary(true)
    if (Model.Id == 0)
    {
        @Html.HiddenFor(model => model.CreatedUserName)
    }
    else
    {
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CreatedUserId)
        @Html.HiddenFor(model => model.CreatedDate)
        @Html.HiddenFor(model => model.IsDeleted)
        @Html.HiddenFor(model => model.Code)
        @Html.HiddenFor(model => model.BarCode)
        @Html.HiddenFor(model => model.Status)
        @*@Html.HiddenFor(model => model.BranchId)*@
    }
    <div class="table-responsive">
        <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
        <div class="row">
            <div class="col-sm-7">
                <div class="product-search-box">
                    <input id="product_barcode" type="text" placeholder="Mã sản phẩm..." autocomplete="off" style="width:20%;margin-bottom:10px;" />
                    <select id="productSelectList" name="productSelectList" style="width:50%">
                        <option value="">- Tìm sản phẩm -</option>
                        @if (productList != null)
                        {
                            foreach (var item in productList.OrderByDescending(x => x.CreatedDate))
                            {
                                <option value="@item.Id" data-selected="0" data-value="@item.Id | @item.Image_Name | @(item.Code + " - " + item.Name + " (" + CommonSatic.ToCurrencyStr(item.PriceOutbound, null) + ")")" data-code="@item.Code" data-barcode="@item.Barcode" data-product-type="@item.CategoryCode" data-price="@(item.PriceOutbound)" data-unit="@item.Unit">@item.Code - @item.Name</option>
                            }
                        }
                        else
                        {

                        }
                    </select>

                </div>

                <div id="listOrderDetail" class="table-responsive top-10" style="max-height: 70%;margin-top: 0.4%">
                    <table id="cTable" class="table table-bordered">
                        <thead>
                            <tr>
                                <th style="width:7%">STT</th>

                                @if (ViewBag.isGiaNhap == "true")
                                {
                                    <th style="width:45%">Tên Sản Phẩm</th>
                                    <th style="width:15%">Số lượng</th>
                                    <th style="width:25%">Thành tiền</th>
                                }
                                else
                                {
                                    <th style="width:35%">Tên Sản Phẩm</th>
                                    <th style="width:10%">Số lượng</th>
                                    <th style="width:15%">Đơn giá</th>
                                    <th style="width:15%">Thành tiền</th>
                                }
                                <th style="width:50px;"></th>
                            </tr>
                        </thead>
                        <tbody class="detailList">
                            @if (Model.DetailList.Count() > 0)
                            {
                                foreach (var item in Model.DetailList)
                                {
                                    @Html.Partial("LoadProductItem", item);
                                }
                            }

                        </tbody>
                        <tfoot>
                            <tr>
                                <td>
                                    <input style="width:30px;" autocomplete="off" data-val="true" data-val-number="The field Sản phẩm đã chọn must be a number." data-val-required="Bắt buộc nhập" id="ProductItemCount" maskformat="" name="ProductItemCount" placeholder="" type="text" value="@Model.DetailList.Count" readonly="readonly" />
                                </td>
                                <td></td>
                                <td id="TongSoLuong" align="right" style="font-weight:bold"></td>
                                <td id="TongThanhTien" align="right" style="font-weight:bold"></td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                    <span style="color:red" class="field-validation-valid help-inline" data-valmsg-for="ProductItemCount" data-valmsg-replace="true"></span>
                </div>
            </div>

            <div class="col-sm-5">
                <div class="widget-box" id="widget-box-1">
                    <div class="widget-header">
                        <h5 class="widget-title">Thông tin chi tiết</h5>
                    </div>
                    <div class="widget-body">
                        <div class="widget-main">
                            @if (warehouseList.Count() <= 0)
                            {
                                <div class="alert alert-danger">
                                    <button type="button" class="close" data-dismiss="alert">
                                        <i class="ace-icon fa fa-times"></i>
                                    </button>

                                    <strong>
                                        <i class="ace-icon fa fa-times"></i>
                                        Thông báo!
                                    </strong>
                                    Bạn chưa được phân quyền quản lý kho. Không thể lập phiếu yêu cầu
                                    <br>
                                </div>
                            }
                            @Html.CustomDropDownListFor(model => model.WarehouseDestinationId, warehouseList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleChosen)
                            @Html.CustomTextboxFor(model => model.TotalAmount, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 numberinput2" }, { "disabled", "disabled" } })
                            @Html.CustomTextAreaFor(model => model.Note, Wording.Note, WidthType.span12, true, null, "hide", "full-w")
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" id="Save" name="Save" value="Save">
            <i class="ace-icon fa fa-save"></i>
            @Wording.Save
        </a>
    }
}


@section Scripts {
    <link href="/Scripts/RadCombobox_v1/RadComboBoxLite.css" rel="stylesheet" />
    <script src="/Scripts/RadCombobox_v1/rabCombobox.js"></script>
    <script>
        //truyền từ action create của controller qua khi thực hiện submit và return về lại view create, để nhận biết là được gọi theo dạng popup
        var closePopup = '@ViewBag.closePopup';
        $(document).ready(function () {
            //nếu là được gọi theo dạng popup từ form khác thì chạy đoạn code bên dưới
            if (closePopup != '') {
                var option = '<option value="@Model.Id" >@Model.Code</option>';
                //tên funtion có thể khác theo từng công việc riêng (đây chỉ là mẫu khi thêm mới sẽ gọi lại)
                window.parent.ClosePopupAndAppendSelect(option);
            }
        });
        var PO_Id = '@Request["POId"]';

        $(document).ready(function () {
            LoadNumberInput();
            $('#Save').click(function () {
                debugger
                var rows = $("#cTable tbody").find("tr").length;
                if (rows > 0) {

                    ClearFormatBeforeSubmit($("#CreateRequestInbound"));
                    $("#CreateRequestInbound").submit();
                }
                else {

                    $("#danger-alert").fadeTo(2000, 500).slideUp(500, function () {
                        $("#danger-alert").slideUp(500);
                    });

                }
            });
            //init rcb chọn sản phẩm
            $('#productSelectList').radComboBox({
                colTitle: 'ID, Hình, Tên sản phẩm',
                colValue: 1,
                colImage: 2,
                colHide: '1',
                colSize: '0px,50px,',
                colClass: ',,',
                //width: 600,
                height: 300,
                boxSearch: true,
                colSearch: 2
            });

            //$('#TotalAmount').numberFormat();
            //$('.detail_item_price').numberFormat('before');
            //$('#PaymentViewModel_Amount').val('0').numberFormat();

            //chọn payment method mặc đỉnh để validate
            //$('#PaymentViewModel_PaymentMethod').val($('#PaymentViewModel_PaymentMethod option:last-child').attr('value'));

            if (PO_Id != '') {
                $('#PurchaseOrderId').val(PO_Id).trigger('chosen:updated');
                loadPurchaseOrderById();
            }


            //Hiển thị giá và tính thành tiền khi chọn sản phẩm
            $('#productSelectList').on('change', function () {
                var $this = $(this);
                var selected = $this.find("option:selected");

                if (selected.val() == '' || $('#product_item_' + selected.val()).length > 0)
                    return;

                var OrderNo = $('.detailList tr').length;
                var ProductId = selected.val();
                var ProductName = selected.text();
                var Unit = selected.data("unit");
                var Quantity = 1;
                var Price = selected.data("price");
                var ProductType = selected.data("product-type");
                var ProductCode = selected.data("code");

                var formdata = {
                    OrderNo: OrderNo,
                    ProductId: ProductId,
                    ProductName: ProductName,
                    Unit: Unit,
                    Quantity: Quantity,
                    Price: Price,
                    ProductType: ProductType,
                    ProductCode: ProductCode
                };
          $("#cTable TBODY TR").each(function () {
                        var row = $(this);
                        var w = $(window);
                        $(this).removeClass('selected_grey').addClass("text_data");

                        var ProductCode1 = $(this).closest('tr').find("td:eq(1) input:nth-child(2)").val();

                        // alert($('#product_barcode3').val());

                        if (String(ProductCode).trim().localeCompare(String(ProductCode1).trim()) == 0) {
                            //alert(ProductCode);
                            $(this).closest('tr').find("td:eq(2) input:nth-child(2)").val(parseInt($(this).closest('tr').find("td:eq(2) input:nth-child(2)").val()) + parseInt(Quantity));
                            $(this).closest('tr').find("td:eq(2) input:nth-child(2)").trigger('change');
                            $(this).addClass('selected_grey');
                            var body = $("html,#listOrderDetail");
                            body.stop().animate({ scrollTop: row.offset().top - (w.height() / 1.6) }, 500, 'swing', function () {
                                row.addClass('scrollCode');
                            });
                            formdata = {};
                            return;
                        } else {
                            $(this).removeClass("scrollCode");
                        }
                        //alert(ProductCode);

                    });
                //Thêm dòng mới
                ClickEventHandler(true, "/RequestInbound/LoadProductItem", ".detailList", formdata, function () {
                    $('#ProductItemCount').val($('#listOrderDetail .detailList tr').length);
                 //   LoadNumberInput();
                    calcTotalAmount();
                    $("#DetailList_" + formdata.OrderNo + "_Quantity").focus().select();
                });
            });

            $('#listOrderDetail').on('focus', '.detail_item_price', function () {
                $(this).select();
            });

            $('#listOrderDetail').on('focus', '.detail_item_qty', function () {
                $(this).select();
            });

            // tính thành tiền và tổng cộng
            $('#listOrderDetail').on('change', '.detail_item_qty', function () {
                $(this).val($(this).val().replace(/\-/g, ''));
                $(this).val($(this).val().replace(/[^0-9.,]/g, ''));
                var ralVal = numeral($(this).val());
                if (ralVal <= 0) {
                    $(this).val(1);
                }
                var $this = $(this);
                var id = $this.closest('tr').data('id');
                //tính tổng cộng
                calcAmountItem(id);
                calcTotalAmount();
            });

            $('#listOrderDetail').on('change', '.detail-product-price .detail_item_price:not(.mask-format-currency)', function () {
                var $this = $(this);
                var id = $this.closest('tr').data('id');
                calcAmountItem(id, 'price');
                calcTotalAmount();
            });

            $('#listOrderDetail').on('keypress', '.detail-product-price, .detail_item_qty', function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                }
            });

            $('#product_barcode').keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                    $('#product_barcode').trigger('change');
                }
            });

            //khi nhập barcode
            $('#product_barcode').change(function () {
                var $this = $(this);
                if ($this.val() != '') {

                    var barcode = $this.val();
                    //đặt lại giá trị rỗng
                    $this.val('').focus();

                    var valueSearch = searchProductByBarCodeContain(barcode);
                    if (valueSearch == undefined) {
                        alert('Không tìm thấy sản phẩm với mã code trên!');
                        return;
                    }

                    $('#productSelectList').val(valueSearch).trigger("change");
                }
            });

            // xóa sản phẩm
            $('#listOrderDetail').on('click', '.btn-delete-item', function () {
                //$(this).closest('tr').next('tr.template_location').remove();
                $(this).closest('tr').remove();

                var countItem = $('.detailList tr').length;
                $('#ProductItemCount').val(countItem);

                if (countItem == 0) {
                    $('#ProductItemCount').val('');
                    $('#TongSoLuong').text('');
                    $('#TongThanhTien').text('');
                }
                calcTotalAmount();

                $('.detailList tr').each(function (index, tr) {
                    $(tr).attr('role', index);
                    $(tr).find('td:first-child').text(index + 1);

                    $(tr).find('.detail_item_id input').attr('name', 'DetailList[' + index + '].ProductId').attr('id', 'DetailList_' + index + '_ProductId');
                    $(tr).find('.detail_item_qty').attr('name', 'DetailList[' + index + '].Quantity').attr('id', 'DetailList_' + index + '_Quantity');
                    $(tr).find('.detail_item_price').filter(':not(.mask-format-currency)').attr('name', 'DetailList[' + index + '].Price').attr('id', 'DetailList_' + index + '_Price');
                    $(tr).find('.detail_item_unit').attr('name', 'DetailList[' + index + '].Unit');
                });
            });
        });

        function searchProductByBarCodeContain(barcode) {
            barcode = barcode.toLowerCase();
            //var $productSelect = $('.detail_item_id').first();

            var $optionList = $("#productSelectList").find('option');

            var arrResulft = [];
            for (var i = 0; i < $optionList.length; i++) {
                var data_code = $($optionList[i]).data('code') != undefined ? $($optionList[i]).data('code').toString().toLowerCase() : undefined;
                if (barcode.indexOf(data_code) != -1)
                    arrResulft.push($($optionList[i]).attr('value'));

                if (arrResulft.length == 1) {
                    return arrResulft[0];
                }
            }

            return arrResulft[0];
        };

        function calcAmountItem(id, priceFrom) {
            var input_price = $('#DetailList_' + id + '__Price');
            var _price = input_price.val() != '' ? removeComma(input_price.val()) : 0;
            var $qty = $('tr#product_item_' + id).find('.detail_item_qty');
            var qty = 1;
            if ($qty.val() == '') {
                $qty.val(1);
            } else {
                qty = parseInt(removeComma($qty.val())) < 0 ? parseInt(removeComma($qty.val())) * -1 : parseInt(removeComma($qty.val()));
            }
            var total = parseFloat(_price) * qty;
            $('tr#product_item_' + id).find('.detail_item_total').text(numeral(total).format('0,0'));
        };

        function calcTotalAmount() {
            var total = 0;
            var total1 = 0;

            var selector = '.detailList tr';
            $(selector).each(function (index, elem) {
                if ($(elem).find('.detail_item_total').text() != '') { // la số thì mới tính
                    total += parseFloat(removeComma($(elem).find('.detail_item_total').text()));
                    $("#TongThanhTien").text(numeral(total).format('0,0'));
                    //$(elem).find('.detail_item_total').text(numeral($(elem).find('.detail_item_total').text()).format('0,0'));
                }

                if ($(elem).find('.detail_item_qty').val() != '') { // la số thì mới tính
                    total1 += parseInt($(elem).find('.detail_item_qty').val().replace(/\-./g, ''));
                    $("#TongSoLuong").text(currencyFormat(total1));
                }

                if (index == $(selector).length - 1) {
                    $('#mask-TotalAmount').val(numeral(total).format('0,0'));
                    $('#TotalAmount').val(numeral(total).format('0,0'));
                }
            });
        };

        function checkChosenProductOnTable() {
            var flag = true;
            if ($('#PurchaseOrderId').val() == '') {
                $('.detailList select.detail_item_id').each(function (index, elem) {
                    if ($(elem).val() == '') {
                        var message = $(elem).data('val-required') != undefined ? $(elem).data('val-required') : 'Chưa chọn sản phẩm!';
                        $(elem).next('span').text(message);
                        flag = false;
                    }
                });
            }
            return flag;
        }

        ////hàm gọi lại từ form tạo mới phiếu nhập
        //function ClosePopupAndAppendSelectPurchaseOrder(optionSelect) {
        //    ClosePopup(false);
        //    $('#PurchaseOrderId').append($(optionSelect)).trigger("chosen:updated");
        //}

        function parseValidatorForm(form) {
            //jQuery.noConflict();

            // if the form is in a dialog box {
            var form = $(form);
            form.removeData('validator').removeData('nobtrusiveValidation');
            $.validator.unobtrusive.parse(form); // }

            $.fn.extend({
                // form validation {
                isValid: function () {
                    var self = $(this);
                    $.validator.unobtrusive.parse(self);
                    return self.data('unobtrusiveValidation').validate();
                } // }
            });
        };

        $(document).ready(function () {
            $("#ProductItemCount").attr("readonly", "true");

            @*var modelNextDayPayment = '@DateTime.Now.AddDays(30).ToString("dd/MM/yyyy")';
            $('#IsPayment').change(function () {
                $('.control-group-payment').toggle();
                $('#PaymentViewModel_PaymentMethod').val('').trigger('change');
                if ($(this).is(':checked') == true) {
                    $('#PaymentViewModel_Amount, #mask-PaymentViewModel_Amount').val($('#TotalAmount').val()).trigger('change');
                    $('#NextPaymentDate').val(modelNextDayPayment);
                    $('#AmountRemain').val('0');

                    $('.content-scroll').animate({ scrollTop: $(this).offset().top - 50 }, 100);
                } else {
                    $('.content-scroll').animate({ scrollTop: 0 }, 500);
                }
            });

            $('#PaymentViewModel_PaymentMethod').change(function () {
                if ($(this).val() == "Chuyển khoản")
                    $('.control-group-payment-method').show();
                else {
                    $('.control-group-payment-method').hide();
                    $('#PaymentViewModel_BankAccountNo').val('');
                    $('#PaymentViewModel_BankAccountName').val('');
                    $('#PaymentViewModel_BankName').val('');
                }
            });

            $('#mask-PaymentViewModel_Amount').blur(function () {

                var totalAmount = parseFloat($('#TotalAmount').val());
                var amount = parseFloat($('#PaymentViewModel_Amount').val());
                if (amount < totalAmount) {
                    $('.NextPaymentDate-container').show();
                    $('#AmountRemain').val(currencyFormat(totalAmount - amount));
                }
                else
                    $('.NextPaymentDate-container').hide();
            });*@
        });
    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
}
