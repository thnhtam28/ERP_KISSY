@model IEnumerable<RequestInboundDetailViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = "Danh sách số lượng nhập kho";
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "RequestInbound",
        ActionName = "QuantityInbound",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    int rowNumber = ViewBag.Tongdong;
    int stt = 0;
    int numberOfItem = ViewBag.AmountPage;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
    //if(Request["grid-page"] == null)
    //{
    //    currentPage = 1;
    //}
    //else
    //{
    //    currentPage = Convert.ToInt32(Request["trang"]);
    //}
    int tongPage = (rowNumber / numberOfItem) + 1;
    var top1 = "";
    string Status = Request["Status"] != null ? Request["Status"] : "";
    var url = Request.Url;
    int sopage = ViewBag.AmountPage;
}

<link href="@Url.Content(" ~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content(" ~/Scripts/gridmvc.min.js")" type="text/javascript"></script>
<style>
    .pagination {
        margin-top: 14px;
        margin-right: 5px;
    }
</style>
@helper GridColumnCommand(int id, string status)
{
    @*<p>
            @if (status == "new")
            {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Cancel", "RequestInbound", "Sale"))
            {
            <a class="btn btn-mini btn-danger" href="@Url.Action(" Cancel", "RequestInbound" , new { Id= id })">
                <i class="glyphicon glyphicon-remove "></i>
                @Wording.RequestInboundStatus_cancel
            </a>
            }
            }
            @if (status == "cancel")
            {
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
            }
        </p>*@

}

@helper GridColumnName(string name, int id)
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;
    <a href="@Url.Action("Detail", "RequestInbound" , new { Id= id })">@name</a>

    @*if (!string.IsNullOrEmpty(note))
        {
        <span class="help-button" data-rel="tooltip" data-placement="bottom" data-original-title="@note">?</span>
        }*@
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper Total(float quantity, float price)
{
    var total = quantity * price;
    <span>@total</span>
}
@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @*@Html.TextBox("txtCusName", Request["txtCusName"], new { @class = "form-control", autocomplete = "off", placeholder = "Tên khách hàng..." })*@
        @Html.TextBox("txtCode", Request["txtCode"], new { @class = "", autocomplete = "off", placeholder = "Mã yêu cầu nhập kho..." })
        @Html.DropDownList("status", SelectListHelper.GetSelectList_Category("RequestInbound_Status", Request["status"], "Value", null), "- Trạng thái -", new Dictionary<string, object>
            { { "class", "" }, { "data-val-required", "Bắt buộc chọn." } })
        @*@Html.DropDownList("branchId", SelectListHelper.GetSelectList_DepartmentAllNew(Request["branchId"], "Nhà thuốc"), new Dictionary<string, object>
            { { "class", "" }, { "data-val-required", "Bắt buộc chọn." } })*@
        <span class="input-daterange">
            @Html.TextBox("startDate", Request["startDate"] != null ? Request["startDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Từ ngày..." })
            <span class="">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("endDate", Request["endDate"] != null ? Request["endDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Đến ngày..." })
        </span>
    </p>
    @Html.TextBox("numberrowpage", Request["numberrowpage"], new { @class = "", id = "numberrowpage", style = "display: none" })
    @Html.TextBox("numberrowpage", Request["numberrowpage"], new { @class = "", id = "numberrowpage1", onchange = "myFunction()", autocomplete = "off", style = "width:30px;display: none ", placeholder = "Số lượng sản phẩm" })

}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}
@helper GridColumnStatusName(string status)
{
    switch (status)
    {
        case "new":
            <span class="label label-info">@Wording.RequestInboundStatus_new</span>
            break;
        case "ApprovedASM":
            <span class="label label-warning pull-left" style="margin-right:5px">Đang xử lý</span>
            break;
        case "ApprovedKT":
            <span class="label label-warning pull-left" style="margin-right:5px">Đã duyệt</span>
            break;
        case "shipping":
            <span class="label label-warning">@Wording.RequestInboundStatus_shipping</span>
            break;
        case "inbound_complete":
            <span class="label label-success">@Wording.RequestInboundStatus_inbound_complete</span>
            break;
        case "cancel":
            <span class="label label-danger">@Wording.RequestInboundStatus_cancel</span>
            break;
        case "refure":
            <span class="label label-danger">@Wording.RequestInboundStatus_refure</span>
            break;
    }
}
@{ var index = 0;}
@if (!isPopup)
{
    using (Html.BeginForm("Delete", pageSetting.ModuleName, FormMethod.Post))
    {
        <div class="table-responsive">
            <div id="test">

                @Html.Grid(Model).Columns(columns =>
            {

                //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
                columns.Add().Titled("#").SetWidth(50).RenderValueAs(o =>
              {
                  stt++;

                  return @<text> @(stt + ((currentPage - 1) * numberOfItem)) </text>;

              });
                columns.Add().Titled("Mã yêu cầu").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.RQCode, u.RequestInboundId.Value)).SetWidth(100);
                columns.Add().Titled(Wording.BranchName).RenderValueAs(n => n.QRBranchName).SetWidth(150);

                columns.Add().Titled(Wording.Product).RenderValueAs(n => n.ProductName).SetWidth(150);
                columns.Add(u => u.Quantity).Titled(Wording.Quantity).RenderValueAs(n => @Common.PhanCachHangNgan(n.Quantity)).SetWidth(30);
                columns.Add().Titled(Wording.Total).Sortable(true).SetWidth(80).RenderValueAs(n => @CommonSatic.ToCurrencyStr(n.Price * n.Quantity, null)).Css("text-right");
                columns.Add().Titled(Wording.Status).SetWidth(100).Sanitized(false).Encoded(false).RenderValueAs(n => GridColumnStatusName(n.RQStatus));
                columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");



                //columns.Add().Titled(Wording.BranchName).RenderValueAs(n => n.BranchName);
                //columns.Add().Titled("Nhân viên bán").RenderValueAs(n => n.SalerName).SetWidth(150);
                //columns.Add().Titled("TT ghi sổ").Sanitized(false).Encoded(false).RenderValueAs(n => (n.IsPayment ? "<span style=\"color:green\"><b>Đã ghi sổ</b></span>" : "")).SetWidth(120);
                //columns.Add().Titled("CT xuất kho").Sanitized(false).Encoded(false).RenderValueAs(n => string.Format("<a href=\"/ProductOutbound/Detail/{0}\" target=\"_blank\">{1}</a>", n.ProductOutboundId, n.ProductOutboundCode)).SetWidth(120);
                //columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
                //columns.Add(u => u.Id).Titled("").Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id, u.Status)).SetWidth(200);

            }).WithPaging(sopage)
            </div>
        </div>
        <div class="container" style="margin-top: 6px;width: auto;background-color: #eff3f8;height: 60px;/* background-color: aqua; */">


            <div class="row">

                <div style="float:right;margin-right:20px;margin-top:14px">
                    <label>Trang</label>
                    <input id="trang" name="trang" type="text" style="width :50px; height: 27px" placeholder="@currentPage/@tongPage" />
                    <label>Số dòng</label>
                    <input id='SoTrang1' style="width :30px; height: 27px; border: 1px solid #D5D5D5" placeholder=@numberOfItem />
                </div>
            </div>


        </div>


    }
}
<script>

    $('#test').find('table.table.table-striped.grid-table').first().attr('id', 'CTable');
    $('#test').find('table.table.table-striped.grid-table thead').first().attr('id', 'CTh');


</script>

<script src="~/Scripts/jquery.freezeheader.js"></script>
<script>
    $(document).ready(function () {
        $("#CTable").freezeHeader({ 'offset': '30px' });
    })
</script>
@*else
    {
    @Html.Grid(Model).Columns(columns =>
    {
    //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
    columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Code).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id, isPopup));
    }).WithPaging(10)
    }*@

@section Scripts {
    <script>
        $(".grid-footer").css({ "float": "right", "width": "auto" });
    </script>
    <script type="text/javascript">
        function myFunction() {
            var x = document.getElementById("numberrowpage1").value;
            document.getElementById("numberrowpage").value = x;
            setCookie("NUMBERROW_INVOICE_CookieName", x, 100);

        }
    </script>
    <script type="text/javascript">
        //Bind keypress event to textbox
        $('#trang').keypress(function(event){
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
                var x = document.getElementById('trang').value;
            var url = window.location.href;

            if (url.includes("?grid-page=" +@currentPage) || url.includes("&grid-page=" +@currentPage)) {
                var url = url.replace("grid-page=" +@currentPage, "grid-page=" + x);
            }
            else {
                if (!url.includes("grid-page=") && url.includes("?")) {
                    var url = url + "&grid-page=" + x;
                }
                else {
                    var url = url + "?grid-page=" + x;
                }
            }
            window.location.href = url;
            }

        });
         $('#SoTrang1').keypress(function(event){
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
                var SoTrang1 = $("#SoTrang1").val();

          $("#SoTrang1").val(SoTrang1);
            $('#numberrowpage1').val(SoTrang1);
           $('#numberrowpage').val(SoTrang1);
           $('#numberrowpage1').trigger('change');
            $('#numberrowpage').trigger('change');
            location.reload();
            }

         });
         $(document).ready(function () {

            var strVal = getCookie("NUMBERROW_INVOICE_CookieName");
            //alert(strVal);
            $('#numberrowpage').val(strVal);
            $('#numberrowpage1').val(strVal);

        });
        //$('#SoTrang1').keyup(function (e) {
        //    var SoTrang1 = $("#SoTrang1").val();

        //  $("#SoTrang1").val(SoTrang1);
        //    $('#numberrowpage1').val(SoTrang1);
        //   $('#numberrowpage').val(SoTrang1);
        //   $('#numberrowpage1').trigger('change');
        //    $('#numberrowpage').trigger('change');
        //    location.reload();
        //});
    </script>
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })
        function ClosePopupAndDoSomething() {
            ClosePopup(true);

        }
        $(document).ready(function () {
            $('[data-rel="tooltip"]').tooltip({ container: 'body' });
        });
    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
}
