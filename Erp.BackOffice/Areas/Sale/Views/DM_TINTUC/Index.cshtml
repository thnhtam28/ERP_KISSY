@model IEnumerable<DM_TINTUCViewModel>

    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Sale.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = "Danh sách tin tức";
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "DM_TINTUC",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = true,
            IsPopup = false,
            DisplayBackButton = false,
            AdvancedSearch = false,
            SearchOjectAttr = ViewBag.ListOjectAttrSearch
        };
        int rowNumber = 0;
    int numberOfItem = ViewBag.AmountPage;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
    var top1 = "";
    string Status = Request["Status"] != null ? Request["Status"] : "";
    var url = Request.Url;
    int sopage = ViewBag.AmountPage;
        IEnumerable<SelectListItem> nhomtinList = (IEnumerable<SelectListItem>)ViewBag.nhomtinList;
    }

    @helper GridColumnCommand(int id)
    {
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "DM_TINTUC", "Sale"))
        {
            <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
                <button name="Delete" value="Delete" type="submit" class="btn btn-minier btn-danger">
                    <i class="ace-icon fa fa-trash"></i>
                </button>
            </div>
        }
    }

    @helper GridColumnName(int id, string TIEUDE)
    {
        TIEUDE = string.IsNullOrEmpty(TIEUDE) ? "No Title" : TIEUDE;
        <a href="@Url.Action("Edit", "DM_TINTUC", new { Id = id })"><b>@TIEUDE</b>   </a><br />

    }


    @helper CheckDeleteColumns(int Id)
    {
        <label>
            <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
            <span class="lbl"></span>
        </label>
    }

    @helper BuildCheckAll()
    {
        <label>
            <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
            <span class="lbl"></span>
        </label>
    }

    @helper isshow(int id, int? is_show)
    {
        <label>
            <input id="is_show_table" class="ace class-is-show text-center" type="checkbox" name="is-show-table" value="@is_show" checked="@(is_show == 1? "checked":null)">
            <span class="lbl"></span>
        </label>
    }
    @using (Html.BeginPageHeaderContainer(pageSetting))
    {
        <p>

            @Html.TextBox("txtSearch", Request["txtSearch"], new { @class = "", autocomplete = "off", placeholder = "Tiêu Đề" })
            @Html.DropDownList("NHOMTIN_ID", nhomtinList, "Nhóm Tin", new Dictionary<string, object> { { "class", "" }, { "data-val-required", "Bắt buộc chọn." } })

        </p>
    }



    @if (ViewBag.errors != null && ViewBag.errors != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.errors
        </div>
    }

    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-block alert-danger">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-warning red"></i>
            @ViewBag.FailedMessage
        </div>
    }

    <p>Tổng số: <b>@Erp.BackOffice.Helpers.Common.PhanCachHangNgan(Model.Count())</b></p>

    @using (Html.BeginForm("Delete", "DM_TINTUC", FormMethod.Post))
    {
        <div class="table-responsive">
            <div id="test">
                @Html.Grid(Model).Columns(columns =>
                {
                    columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(40).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.TINTUC_ID));
                    columns.Add(u => u.STT).Titled("STT").Sanitized(false).Encoded(false).RenderValueAs(o =>
           {
           rowNumber++;

           return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;

});
                    columns.Add(u => u.TEN_NhomTin).Titled("Nhóm tin").Sanitized(false).Encoded(false).RenderValueAs(u => u.TEN_NhomTin).SetWidth(85);
                    columns.Add().Titled("Hiện").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => isshow(u.TINTUC_ID, u.IS_SHOW));

                         columns.Add().Titled("Tiêu Đề").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.TINTUC_ID, u.TIEUDE));
                    columns.Add().Titled("Nổi Bật").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => isshow(u.TINTUC_ID, u.IS_NOIBAT));
                    columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
                    columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
                    columns.Add(u => u.TINTUC_ID).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.TINTUC_ID)).SetWidth(85);
                }).WithPaging(10)
            </div>
        </div>
        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "DM_TINTUC", "Sale"))
            {
                <a class="btn btn-mini btn-primary" href="@Url.Action("Create", pageSetting.ModuleName)">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </a>
            }
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "DM_TINTUC", "Sale"))
            {
                <button class="btn btn-white btn-sm btn-danger" type="submit" name="DeleteAll" value="DeleteAll" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash"></i>
                    @Wording.Delete
                </button>
            }
        }
    }
    <script>

        $('#test').find('table.table.table-striped.grid-table').first().attr('id', 'CTable');


    </script>
    
    <script src="~/Scripts/jquery.freezeheader.js"></script>
    <script>
        $(document).ready(function () {
            $("#CTable").freezeHeader({ 'offset': '30px' });
        })
    </script>
    @section Scripts {

        <script type="text/javascript">
            function CheckIsval() {
                if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                    alert("Phải chọn ít nhất 1 item.");
                    return false;
                }
                else {
                    if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }

            $('[name="Delete"]').click(function () {
                if (confirm('Bạn có chắc muốn xóa item ?')) {
                    $(this).closest('tr').children('td').each(function (i, e) {
                        $(this).find("input.class-delete-all").prop("checked", true);
                        return true;
                    })
                }
                else {
                    return false;
                }

            })

        </script>
    }
